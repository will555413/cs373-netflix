#!/usr/bin/env python3

from numpy import mean, sqrt, square, subtract
from CacheFactory import print_lst

# --------------------
# Cache implementation
# --------------------
"""
Use Python Dictionary!!!!
"""
cache = []
# manually added cycle length of 0, which is indexed at 0, as -1 (garbage value)
cache.append(-1)
# manually added cycle length of 1, which is indexed at 1, as 1
cache.append(1)
# add cycle length placeholders into the cache, starting from 2 since 0 and 1 have been added
for idx in range(2, 1000000):
    cache.append(0)

# ---------------
# user_cache_read
# ---------------

def user_cache_read (user_cache) :
    """
    Reads the user cache generated by the CacheFactory.py
    user_cache the movie cache file generated 
    """
    ucache = {}
    for line in user_cache:
        uid, p1, p2, p3, p4, p5 = line.split()
        ucache[uid] = [p1, p2, p3, p4, p5]
    return ucache

# --------------
# mov_cache_read
# --------------

def mov_cache_read (movie_cache) :
    """
    Reads the movie cache generated by the CacheFactory.py
    movie_cache the movie cache file generated 
    """
    mcache = []
    for line in movie_cache:
        mid, yr, rat = line.split()
        mcache.append([int(yr), float(rat)])
    return mcache
    

# ------------
# netflix_eval
# ------------

def netflix_eval (i, j) :
    """
    
    """
    assert i>0 and i<=1000000
    assert j>0 and j<=1000000

    b = j if j>i else i
    a = i if b == j else j
    a = b//2 if b//2>a else a

    max_count = -1
    for num in range(a, b+1):
        count = cycle_length(num)
        if count > max_count:
            max_count = count

    assert max_count > 0
    return max_count

# -------------
# netflix_print
# -------------

def netflix_print (w, i, j, v) :
    """
    
    """
    w.write(str(i) + " " + str(j) + " " + str(v) + "\n")

# -------------
# collatz_solve
# -------------

def netflix_solve (r, w) :
    """
    
    """
    ucache = user_cache_read(open('/u/wc6892/Documents/cs373-netflix/wc6892-ucache.txt', 'r'))
    mcache = mov_cache_read(open('/u/wc6892/Documents/cs373-netflix/wc6892-mcache.txt', 'r'))
    # User cache and movie cache that structured similarly to the caches in CacheFactory
    # Created to stored the caches generated by teh factory
      
    # print_lst(mcache)
    print_lst(ucache)
    # for s in r :
    #     i, j = collatz_read(s)
    #     v    = collatz_eval(i, j)
    #     collatz_print(w, i, j, v)
