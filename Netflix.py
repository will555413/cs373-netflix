#!/usr/bin/env python3

from numpy import mean, sqrt, square, subtract

# ---------------
# user_cache_read
# ---------------

def user_cache_read (user_cache) :
    """
    Reads and returns the user offsets cache generated by the CacheFactoryOff.py as dictionary
    The cache recorded the offset of average rating given by each user relative to average of all ratings recorded 
    user_cache the user offsets cache file generated 
    """
    ucache = {}
    for line in user_cache:
        uid, rat = line.split()
        ucache[int(uid)] = float(rat)
    return ucache

# --------------
# mov_cache_read
# --------------

def mov_cache_read (movie_cache) :
    """
    Reads and returns the movie cache generated by the CacheFactoryOff.py as list
    The first line of the cache recorded the average of all ratings recorded
    The rest of the cache recorded the offset of average rating each movie received relative to average of all ratings recorded
    The first entry also offset the indices assigned to each movie offset so that the movie id could be used an index
    movie_cache the movie offsets cache file generated 
    """
    mcache = []
    for line in movie_cache:
        mcache.append(float(line))
    return mcache

# -------------
# netflix_solve
# -------------

def netflix_solve (r, w) :
    """
    Core of the Netflix.py
    Calls functions to construct caches, then predict the rating of specified users on specified movies using offsets
    r the input stream
    w the output stream
    """
    ucache = user_cache_read(open('/u/wc6892/Documents/cs373-netflix/wc6892-ucacheoff.txt', 'r'))
    mcache = mov_cache_read(open('/u/wc6892/Documents/cs373-netflix/wc6892-mcacheoff.txt', 'r'))
    # User cache and movie cache that stored offsets of each movie and user relative to the global average
    # Created to stored the caches generated by teh factory

      
    mid = 0
    for s in r :
        if s.replace('\n', '').endswith(':'):
            mid = int(s.replace(':', ''))
            w.write(s)
            continue
        uid = int(s)
        v   = mcache[0]+mcache[mid]+ucache[uid]
        w.write(str(round(v, 2))+"\n")
